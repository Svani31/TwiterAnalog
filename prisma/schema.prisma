// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  email          String     @unique
  name           String
  password       String
  image          String?
  post           Post[]
  comment        Comment[]
  followers      Follower[]
  like           Like[]
  message        Message[]
  myChat         Chat[]     @relation("myChat")
  secondUserChat Chat[]     @relation("secondUserChat")
}

model Follower {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  comment   Comment[]
  like      Like[]
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  postId String @db.ObjectId
  userId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  context   String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Chat {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  myUserId       String    @db.ObjectId
  reciverUserId  String    @db.ObjectId
  message        Message[]
  myChat         User      @relation(name: "myChat", fields: [myUserId], references: [id])
  secondUserChat User      @relation(name: "secondUserChat", fields: [reciverUserId], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  context   String
  image     String?
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  chatId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  chat      Chat     @relation(fields: [chatId], references: [id])
}
